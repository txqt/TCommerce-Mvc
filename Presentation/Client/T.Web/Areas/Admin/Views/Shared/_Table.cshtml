@model DataTableViewModel

<style>
    div.dt-buttons {
        margin: 10px 10px 20px 0; /* Adjust as needed */
    }

    .create-new-button {
        margin-right: 0;
    }
</style>

@* <h1 class="text-info text-center">@Model.TableTitle</h1> *@

<br />

<div class="table-responsive display" style="width:100%">
    <table class="table table-success table-striped table-hover" id="@Model.TableId">
        <thead>
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<script>


    // function clearSelectAllCheckbox() {
    //     $('#selectAll').prop('checked', false);
    //     selectedIds = $('input[name="@Model.Columns.FirstOrDefault().CheckBoxName"]:checked').map(function () {
    //         return this.value;
    //     }).get();
    //     console.log(selectedIds);
    // }

    @if (!string.IsNullOrEmpty(Model.SearchButtonId))
    {
        <text>
            $('#@Model.SearchButtonId').click(function () {
                $('#@Model.TableId').DataTable().ajax.reload();
                clearSelectAllCheckbox('#selectAll');
                return false;
            });
        </text>
    }

        $(document).ready(function () {

            var tableId = '#@Model.TableId';
            var url = '@Model.GetDataUrl';

            var createUrl = '@Model.CreateUrl';
            var buttons = [
                {
                    text: '<i class="fa fa-redo"></i>',
                    action: function (e, dt, node, config) {
                        updateTable(tableId, true);
                        $('.btn_save').hide();
                        $('.btn_cancel').hide();
                    }
                },
                'copy',
                {
                    extend: 'collection',
                    text: 'Print table',
                    buttons: [
                        'excel',
                        'pdf'
                    ]
                }
            ];
            if (createUrl && createUrl.length > 0) {
                var createButton = {
                    text: '@(Model.CreateButtonName == null ? "Create" : Model.CreateButtonName)',
                    action: function (e, dt, node, config) {
                    @if (Model.PopupWindow)
                    {
                        <text>
                                                openPopup(createUrl);
                        </text>
                    }
                    else
                    {
                        <text>
                                                window.location.href = createUrl;
                        </text>
                    }
                                                                                                },
                    className: 'create-new-button btn btn-info'
                };
                buttons.unshift(createButton);
            }

            var serverSide = @Model.ServerSide.ToString().ToLower();

            $(document).on('click', '#selectAll', function () {
                $('input[name="@Model.Columns.FirstOrDefault().CheckBoxName"]').prop('checked', this.checked);
                selectedIds = $('input[name="@Model.Columns.FirstOrDefault().CheckBoxName"]:checked').map(function () {
                    return this.value;
                }).get();
                console.log(selectedIds);
            });

            $(document).on('change', 'input[name="@Model.Columns.FirstOrDefault().CheckBoxName"]', function () {
                selectedIds = $('input[name="@Model.Columns.FirstOrDefault().CheckBoxName"]:checked').map(function () {
                    return this.value;
                }).get();
                console.log(selectedIds);
            });

                                        LoadTable_@(Model.TableId)(tableId, url, buttons, serverSide);

            //Edit inline
            $(tableId).on('init.dt', function () {
                $('.btn_save').hide();
                $('.btn_cancel').hide();
            });

            // //--->make div editable > start
            // $(document).on('click', '.row_data', function (event) {
            //     event.preventDefault();

            //     if ($(this).attr('edit_type') == 'button') {
            //         return false;
            //     }

            //     //make div editable
            //     $(this).closest('div').attr('contenteditable', 'true');
            //     //add bg css
            //     $(this).addClass('bg-warning').css('padding', '5px');

            //     $(this).focus();
            // })

            //--->button > edit > start
            $(document).on('click', '.btn_edit', function (event) {
                event.preventDefault();
                var tbl_row = $(this).closest('tr');

                tbl_row.find('.btn_save').show();
                tbl_row.find('.btn_cancel').show();
                tbl_row.find('.btn_edit').hide();

                tbl_row.find('.row_data').each(function (index, val) {
                    var cell = $(this);

                    // Lưu giá trị ban đầu
                    var originalEntry = cell.html();
                    cell.attr('original_entry', originalEntry);

                    if (cell.find('i').length > 0) {
                        // Nếu ô chứa icon, thay thế bằng checkbox
                        var iconHtml = cell.find('i').clone();
                        var checkbox = $('<input type="checkbox">');
                        checkbox.prop('checked', iconHtml.hasClass('fa-check'));
                        cell.empty().append(checkbox);
                    } else {
                        // Nếu không phải icon, lưu giá trị bình thường
                        cell.attr('contenteditable', 'true')
                            .attr('edit_type', 'button')
                            .addClass('bg-warning')
                            .css('padding', '3px');
                    }
                });
            });

            //--->button > edit > end

            $(document).on('click', '.btn_save', function (event) {
                event.preventDefault();
                var tbl_row = $(this).closest('tr');
                var row_id = tbl_row.attr('row_id');

                // Lấy dữ liệu từ các ô và đóng gói thành đối tượng
                var dataToSend = {};
                tbl_row.find('.row_data').each(function (index, val) {
                    var col_name = $(this).attr('col_name');
                    var col_val;

                    // Xử lý ô chứa checkbox
                    if ($(this).find('input[type=checkbox]').length > 0) {
                        col_val = $(this).find('input[type=checkbox]').is(':checked');
                    } else {
                        col_val = $(this).html();
                    }

                    dataToSend[col_name] = col_val;
                });

                // Thêm giá trị row_id vào dữ liệu
                dataToSend['id'] = row_id;
                console.log(JSON.stringify(dataToSend));
                // Gọi Ajax để lưu dữ liệu
                $.ajax({
                    url: '@Model.EditUrl',
                    type: 'POST',
                    data: JSON.stringify(dataToSend),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        // Cập nhật dữ liệu cho hàng được chọn
                        tbl_row.data(dataToSend);

                        // Cập nhật UI cho hàng được chọn
                        tbl_row.find('.btn_edit').show();
                        tbl_row.find('.row_data').attr('contenteditable', 'false').removeClass('bg-warning').css('padding', '');
                        $('.btn_save, .btn_cancel').hide();
                            
                        tbl_row.find('input[type=checkbox]').each(function () {
                            var isChecked = $(this).is(':checked');
                            var iconHtml = isChecked ? '<i class="fas fa-check true-icon" value="true"></i>' : '<i class="fas fa-times false-icon" value="false"></i>';
                            $(this).closest('.row_data').html(iconHtml);
                        });
                    },
                    error: function (response) {
                        alert(response.message);
                    }
                });

                // Các bước còn lại giữ nguyên
                // tbl_row.find('.row_data').attr('contenteditable', 'false').removeClass('bg-warning').css('padding', '');
                // tbl_row.find('.btn_edit').show();
                // $('.btn_save, .btn_cancel').hide();
            });


            //--->button > cancel > start
            $(document).on('click', '.btn_cancel', function (event) {
                event.preventDefault();

                var tbl_row = $(this).closest('tr');

                var row_id = tbl_row.attr('row_id');

                //hide save and cacel buttons
                tbl_row.find('.btn_save').hide();
                tbl_row.find('.btn_cancel').hide();

                //show edit button
                tbl_row.find('.btn_edit').show();

                //make the whole row editable
                tbl_row.find('.row_data')
                    .attr('edit_type', 'click')
                    .removeClass('bg-warning')
                    .css('padding', '')

                tbl_row.find('.row_data').each(function (index, val) {
                    $(this).html($(this).attr('original_entry'));
                });
            });

            
            //
        });


    function LoadTable_@(Model.TableId)(tableId, url, buttons, serverSide){


        var ajaxSettings;
        if (serverSide) {
            ajaxSettings = {
                url: url,
                type: "POST",
                data: function (data) {
    @if (Model.Filters != null)
    {
        foreach (var filter in Model.Filters)
        {
            if (filter.Type == typeof(string))
            {

                if (!string.IsNullOrEmpty(filter.ModelName))
                {
                    <text>
                                        data.@filter.Name = $('#@(filter.ModelName)_@filter.Name').val();
                    </text>
                }
                else
                {
                    <text>
                                        data.@filter.Name = $('#@filter.Name').val();
                    </text>
                }
                continue;
            }
            if (filter.Type == typeof(bool))
            {
                <text>
                                    data.@filter.Name = $('#@filter.Name').is(':checked');
                </text>
                continue;
            }
            if (filter.Type == typeof(int))
            {
                if (int.TryParse(@filter.Value.ToString(), out int val))
                {
                    <text>
                                        data.@filter.Name = @val;
                    </text>
                }
                continue;
            }
            if (filter.Type == typeof(DateTime?))
            {
                <text>
                                    data.@filter.Name = $('#@filter.Name').val();
                </text>
                continue;
            }
        }
        <text>
                            addAntiForgeryToken(data);
        </text>
    }
                                return data;
                },
                beforeSend: function () {
                    clearSelectAllCheckbox('#selectAll');
                },
                "datatype": "json",
            };
        } else {
            ajaxSettings = {
                url: url,
                type: "GET",
                datatype: "json",
            };
        }

        $(tableId).DataTable().destroy();
        $(tableId).DataTable({
            dom: "<'row'<'col-sm-12'B>>" +
                "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
                "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
            lengthMenu: @Html.Raw(Json.Serialize(Model.LengthMenu)),
            pageLength: @Model.PageLength,
            serverSide: serverSide,
            processing: @Model.Processing.ToString().ToLower(),
            @if(Model.DefaultSort != null)
            {
                <text>
                order: [
                        [@Model.DefaultSort.ColumnIndex, '@Model.DefaultSort.Order']
                    ],
                </text>
            }
            ajax: ajaxSettings,
            buttons: buttons,
            columns: [
    @for (int i = 0; i < Model.Columns.Count; i++)
    {
        var column = Model.Columns[i];
        <text>
                    {
            @if (!string.IsNullOrEmpty(column.Title) && !column.IsMasterCheckBox)
            {
                <text>
                        title: '@JavaScriptEncoder.Default.Encode(column.Title)',
                </text>
            }
            else
            {
                if (!string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
                {
                    <text>
                            title: '<div class="checkbox"><label><input id="selectAll" type="checkbox" />@JavaScriptEncoder.Default.Encode(column.Title)</label></div>',
                    </text>
                }
                else
                {
                    if (string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
                    {
                        <text>
                                title: '<input id="selectAll" type="checkbox"/>',
                        </text>
                    }
                }
            }
                    width: '@column.Width',
                    visible: @column.Visible.ToString().ToLowerInvariant(),
                    searchable: @column.Searchable.ToString().ToLowerInvariant(),
                    orderable: @column.Orderable.ToString().ToLowerInvariant(),
            @if (column.AutoWidth)
            {
                <text>
                        autoWidth: @column.AutoWidth.ToString().ToLowerInvariant(),
                </text>
            }
            @if (!string.IsNullOrEmpty(column.ClassName) || column.Editable)
            {
                <text>
                        className: '@column.ClassName @(column.Editable ? "row_data" : "")',
                </text>
            }
            @if (column.Editable)
            {
                <text>
                        createdCell: function (td, cellData, rowData, row, col) {
                            var idToUse = rowData.Id !== undefined ? rowData.Id : rowData.id;
                            $(td).attr('col_name', '@column.Data');
                            $(td).closest('tr').attr('row_id', idToUse);
                        },
                </text>
            }
            @switch (column.RenderType)
            {
                case RenderType.RenderButtonRemove:
                    <text>
                            render: function (data, type, row, meta) {
                            var idToUse = row.Id !== undefined ? row.Id : row.id;
                            return '<button class="@(column.ClassName ?? "btn btn-danger") deleteBtn" data-url="@(Model.DeleteUrl + "?id=")' + idToUse + '"><i class="far fa-trash-alt"></i></button>';
                            },
                    </text>
                    break;
                case RenderType.RenderButtonEdit:
                    <text>
                        render: function (data, type, row, meta) {
                            if (@Model.PopupWindow.ToString().ToLower()) {
                                return '<button class="@(column.ClassName ?? "btn btn-info")" onclick="openPopup(\'@(Model.EditUrl + "?id=")' + data + '\')"><i class="fas fa-pencil-alt"></i></button>';
                            } else {
                                return '<a class="@(column.ClassName ?? "btn btn-info")" href="@(Model.EditUrl + "?id=")' + data + '"><i class="fas fa-pencil-alt"></i></a>';
                            }
                        },
                    </text>
                    break;
                case RenderType.RenderInlineEdit:
                    <text>
                            render: function (data, type, row, meta) {
                                return '<span class="btn_edit" > <a href="#" class="btn btn-link " row_id="' + data + '" > Edit</a> </span>'
                                    + '<span class="btn_save"> <a href="#" class="btn btn-link"  row_id="' + data + '"> Save</a> | </span>'
                                    + '<span class="btn_cancel"> <a href="#" class="btn btn-link" row_id="' + data + '"> Cancel</a> | </span>';
                            },
                    </text>
                    break;
                case RenderType.RenderPicture:
                    var widthAttr = string.Empty;
                    <text>
                            render: function (data, type, row, meta) {
                                return '<img src="' + data + '" style="max-width: 200px;height: auto; "/>';
                            },
                    </text>
                    break;
                case RenderType.RenderCheckBox:
                    <text>
                            render: function (data, type, row, meta) {
                                return '<input type="checkbox" name="@column.CheckBoxName" class="row-checkbox" value="' + data + '">';
                            },
                    </text>
                    break;
                case RenderType.RenderBoolean:
                    <text>
                            render: function (data, type, row) {
                                return data
                                    ? '<i class="fas fa-check true-icon" value="true"></i>'
                                    : '<i class="fas fa-times false-icon" value="false"></i>';
                            },
                    </text>
                    break;
                case RenderType.NotRender:
                    <text>
                            render: function (data, type, row, meta) {
                                return escapeHtml(data);
                            },
                    </text>
                    break;
            }
                    data: '@column.Data'
                                                                                                                    }
            @if (i != Model.Columns.Count - 1)
            {
                <text>, </text>
            }
        </text>
    }
                                                            ]
                                                });

    $(tableId).on('click', '.deleteBtn', function () {
        var deleteUrl = $(this).data('url');
        if (confirm('Are you sure you want to delete this item?')) {
            $.ajax({
                url: deleteUrl,
                type: 'POST',
                success: function () {
                    $(tableId).DataTable().ajax.reload();
                },
                error: function () {
                    alert('An error occurred while deleting the item.');
                }
            });
        }
    });
                                                    }
</script>