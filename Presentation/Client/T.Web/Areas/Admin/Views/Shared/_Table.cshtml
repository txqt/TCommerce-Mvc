@model DataTableViewModel

<style>
    .dt-buttons .btn {
        margin-right: 10px; /* Adjust as needed */
    }

    .create-new-button {
        margin-right: 0;
    }
</style>

<h1>@Model.TableTitle</h1>

@* @if (Model.CreateUrl != null || Model.CreateUrl == string.Empty)
{
    <p>
        @if (Model.PopupWindow)
        {
            <button class="btn btn-info" onclick="openPopup('@Model.CreateUrl')">@(Model.CreateButtonName == null ? "Create new" : Model.CreateButtonName)</button>
        }
        else
        {
            <a class="btn btn-info" href="@Model.CreateUrl">@(Model.CreateButtonName == null ? "Create new" : Model.CreateButtonName)</a>
        }
    </p>
} *@

<div class="table-responsive display" style="width:100%">
    <table class="table table-success table-striped table-hover" id="@Model.TableId">
        <thead>
            <tr>
                @foreach (var header in Model.Headers)
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<script>
    $(document).ready(function () {
        var tableId = '#@Model.TableId';
        var url = '@Model.GetDataUrl';
        var columns = @Html.Raw(Json.Serialize(Model.Columns));
        LoadTable(tableId, url, columns);
        // Add click event to reset button
        $('#resetTable').click(function () {
            LoadTable(tableId, url, columns);
        });
    });


    function LoadTable(tableId, url, columns) {
        var dataTableColumns = columns.map(function (column) {
            if (column.isEditable) {
                return {
                    data: null,
                    render: function (data, type, row) {
                        var editUrl = column.editUrl + '?id=' + row.id;
                        if (@Model.PopupWindow.ToString().ToLower()) {
                            return '<button class="btn btn-info" onclick="openPopup(\'' + editUrl + '\')">Edit</button>';
                        } else {
                            return '<a class="btn btn-info" href="' + editUrl + '">Edit</a>';
                        }
                    }
                };
            } else if (column.isDeletable) {
                return {
                    data: null,
                    render: function (data, type, row) {
                        var deleteUrl = column.deleteUrl + '?id=' + row.id;
                        return '<button class="btn btn-danger deleteBtn" data-id="' + row.id + '" data-url="' + deleteUrl + '">Delete</button>';
                    }
                };
            } else if (column.isCheckBox) {
                return {
                    data: column.data,
                    render: function (data, type, row) {
                        if (type === "display") {
                            return '<input type="checkbox" disabled="disabled" ' + (data ? 'checked="checked"' : '') + '/>';
                        }
                        return data;
                    }
                };
            } else if (column.isPicture) {
                return {
                    data: column.data,
                    render: function (data, type, row) {
                        return '<img src="' + data + '" style="max-width: 200px;height: auto; "/>';
                    }
                };
            } else {
                return {
                    data: column.data
                };
            }
        });

        $(tableId).DataTable().destroy();
        $(tableId).DataTable({
            dom: 'Bfrtip',
            lengthMenu: @Html.Raw(Json.Serialize(Model.LengthMenu)),
            pageLength: @Model.PageLength,
            ajax: {
                url: url,
                type: "GET",
                datatype: "json",
            },
            buttons: [
                {
                    text: '@(Model.CreateButtonName == null ? "Create" : Model.CreateButtonName)', // Use Model.CreateButtonName if it's not null
                    action: function (e, dt, node, config) {
    @if (Model.PopupWindow)
    {
        <text>
                                openPopup('@Model.CreateUrl'); // Open a popup window with the create new URL
        </text>
    }
    else
    {
        <text>
                                window.location.href = '@Model.CreateUrl'; // Navigate to the create new URL
        </text>
    }
                        },
                    className: 'create-new-button btn btn-info' // Add a class to style the button
                },
                {
                    text: '<i class="fa fa-redo"></i>',
                    action: function (e, dt, node, config) {
                        dt.ajax.reload();
                    }
                },
                'copy',
                {
                    extend: 'collection',
                    text: 'Print table',
                    buttons: [
                        'excel',
                        'pdf'
                    ]
                }
            ],
            columns: dataTableColumns
        });

        $(tableId).on('click', '.deleteBtn', function () {
            var rowId = $(this).data('id');
            var deleteUrl = $(this).data('url');
            if (confirm('Are you sure you want to delete this item?')) {
                $.ajax({
                    url: deleteUrl,
                    type: 'POST',
                    success: function () {
                        $(tableId).DataTable().ajax.reload();
                    },
                    error: function () {
                        alert('An error occurred while deleting the item.');
                    }
                });
            }
        });
    }
</script>